##########################################################################################
## Klipper Macro Configuration for Voron V0.983
## By rplanier (https://github.com/rplanier)
## -------------------------------------------------------------------------------------
## Includes configuration settings for:
## - Tri-Zero triple-belted Z mod (https://github.com/zruncho3d/tri-zero)
## - ZeroClick bed probe (https://github.com/zruncho3d/ZeroClick)
## - Nevermore Micro V4 carbon filter (https://github.com/nevermore3d/Nevermore_Micro)
##########################################################################################


############################################################
# Global Configruation Variables
############################################################

# Read global config variables using: {printer['gcode_macro CONFIG'].name}
# Set global config variables elsewhere using: SET_GCODE_VARIABLE MACRO=CONFIG VARIABLE=name VALUE=1
[gcode_macro CONFIG]

# Temperatures
variable_chamber_temp: 35

# Filaments
variable_filtered_filaments: ['ABS', 'ASA', 'HIPS', 'NYLON', 'PC', 'PET', 'PETG']

# Colors
variable_color_blue: "RED=0 GREEN=0 BLUE=1"
variable_color_green: "RED=0 GREEN=1 BLUE=0"
variable_color_orange: "RED=1 GREEN=0.33 BLUE=0"
variable_color_purple: "RED=0.4 GREEN=0 BLUE=1"
variable_color_purple_dim: "RED=0.02 GREEN=0 BLUE=0.05"
variable_color_red: "RED=1 GREEN=0 BLUE=0"
variable_color_white: "RED=1 GREEN=1 BLUE=1"
variable_color_yellow: "RED=1 GREEN=0.1 BLUE=0"

# Probe position
variable_probe_x: 0
variable_probe_y: 122

# LEDs
variable_led_progress_first: 22
variable_led_progress_count: 7

gcode:


############################################################
# Print Status and Preheating
############################################################

[gcode_macro PRINT_START]
description: Heat the bed, hotend and chamber and print a prime line.
gcode:
    {% set bed_temp = params.BED|default(90)|float %}
    {% set hotend_temp = params.HOTEND|default(240)|float %}
    {% set chamber_temp = params.CHAMBER|default(35)|float %}
    {% set filament = params.FILAMENT|default(PLA) %}

    {% set led = 'overhead' %}
    {% set led_count = printer.configfile.config['neopixel ' ~ led].chain_count|int %}
    {% set led_progress_first = printer['gcode_macro CONFIG'].led_progress_first %}
    {% set led_progress_count = printer['gcode_macro CONFIG'].led_progress_count %}

    # Start pre-heating the bed and extruder
    M140 S100   # Set the bed temp to 100C
    M104 S200   # Set the initial extruder temp to 200C

    # Home all axes, if necessary, and park the toolhead
    PARK_USEFULLY

    # Set LED warmup template
    {% for i in range(led_count) %}
        SET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE=LED_WARMUP_PROGRESS param_target_temp={chamber_temp}
    {% endfor %}

    # Wait to finish pre-heating
    M117 Heating bed
    M190 S100   # Wait for bed temp

    M117 Heating chamber
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber_temp}  # Wait for chamber temp

    M117 Heating bed
    M140 S{bed_temp} # Set the final bed temp

    # Final bed leveling and homing (at chamber temperature)
    M117 Leveling bed
    AUTO_BED_LEVEL
    HOME
    PARK_USEFULLY

    M117 Heating bed
    M190 S{bed_temp} # Wait for bed temp

    # Turn on the Nevermore filter fan if using a filament that emits VOCs
    {% if filament.upper() in printer['gcode_macro CONFIG'].filtered_filaments %}
        FILTER_ON
    {% endif %}

    # Move to priming position
    G90                 # Use absolute coordinates
    G1 X5 Y5 Z0 F6000   # Go to the prime line start position

    M117 Heating hotend
    M109 S{hotend_temp}  # Wait for extruder temp

    LED_PRINTING

    # Print a prime line
    M117 Priming
    G92 E0

    SAVE_GCODE_STATE NAME=prime_extruder_state

    M221 S100               # Set flow to 100
    G1 X5 Y5 Z0 F1000       # Set first line start point
    G1 E8                   # Purge bubble
    G1 X115 Y5 E25 F1000    # Draw the purge line
    G92 E0
    G1 Z2 F3000             # Move Z Axis up
    
    RESTORE_GCODE_STATE NAME=prime_extruder_state

    M117

[gcode_macro PRINT_END]
description: Use 'PRINT_END' in the slicer end code.
gcode:
    M400                # Wait for buffer to clear
    G92 E0              # Zero the extruder
    G1 E-4.0 F3600      # Retract filament
    G91                 # Relative positioning

    # Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    # Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600              # Move nozzle up
    G0 X{x_safe} Y{y_safe} F20000   # Move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                            # Turn off fan
    G90                             # Absolute positioning
    PARK_USEFULLY

    UPDATE_DELAYED_GCODE ID=DELAYED_FILTER_OFF DURATION=600

    LED_SUCCESS

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_extrude: 1.0       # Change this if you need more or less extrusion
gcode:
  LED_PAUSED

  {% set E = printer["gcode_macro PAUSE"].extrude|float %}          # Set E
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}    # Set park positon for x
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}    # Set park positon for y
  # Calculate save lift position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE

  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  LED_PRINTING

  {% set E = printer["gcode_macro PAUSE"].extrude|float %}      # Read E from pause macro

  # Get VELOCITY parameter if specified
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    LED_READY

    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

    PARK_USEFULLY

[gcode_macro PREHEAT]
description: Preheat the bed and hotend
gcode:
    {% set bed_temp = params.BED|default(100)|int %}
    {% set hotend_temp = params.EXTRUDER|default(200)|int %}

    {% set led = 'overhead' %}
    {% set led_count = printer.configfile.config['neopixel ' ~ led].chain_count|int %}
    {% set chamber_temp = printer['gcode_macro CONFIG'].chamber_temp %}
    
    M117 Preheating hotend and bed
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={hotend_temp}

    # Set LED warmup template
    {% for i in range(led_count) %}
        SET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE=LED_WARMUP_PROGRESS param_target_temp={chamber_temp}
    {% endfor %}


###################################
# ZeroClick Probe
###################################

[gcode_macro AUTO_BED_LEVEL]
gcode:
    {% set speed = params.SPEED|default(4000)|float %}
    {% set bed_height = params.BED_HEIGHT|default(15)|float %}
    
    ATTACH_PROBE F={speed} BED_HEIGHT={bed_height}
    Z_TILT_ADJUST
    DETACH_PROBE F={speed} BED_HEIGHT={bed_height}

[gcode_macro ATTACH_PROBE]
gcode:
    {% set speed = params.SPEED|default(4000)|float %}
    {% set bed_height = params.BED_HEIGHT|default(15)|float %}

    SAVE_GCODE_STATE NAME=attach_probe_state
    G90
    {% if printer.toolhead.position.z < bed_height %}
    G0 Z{bed_height}
    {% endif %}
    G0 X{printer['gcode_macro CONFIG'].probe_x + 20} Y{printer['gcode_macro CONFIG'].probe_y - 20} F{speed}
    G0 X{printer['gcode_macro CONFIG'].probe_x} Y{printer['gcode_macro CONFIG'].probe_y - 20} F{speed}
    G0 X{printer['gcode_macro CONFIG'].probe_x} Y{printer['gcode_macro CONFIG'].probe_y} F{speed}
    G0 X{printer['gcode_macro CONFIG'].probe_x + 20} Y{printer['gcode_macro CONFIG'].probe_y} F{speed}
    G0 X{printer['gcode_macro CONFIG'].probe_x + 20} Y{printer['gcode_macro CONFIG'].probe_y - 20} F{speed}
    RESTORE_GCODE_STATE NAME=attach_probe_state

[gcode_macro DETACH_PROBE]
gcode:
    {% set F = params.F|default(4000)|float %}
    {% set bed_height = params.BED_HEIGHT|default(15)|float %}
    
    SAVE_GCODE_STATE NAME=detach_probe_state
    G90
    {% if printer.toolhead.position.z < bed_height %}
    G0 Z{bed_height}
    {% endif %}
    G0 X{printer['gcode_macro CONFIG'].probe_x + 20} Y{printer['gcode_macro CONFIG'].probe_y - 20} F{F}
    G0 X{printer['gcode_macro CONFIG'].probe_x + 20} Y{printer['gcode_macro CONFIG'].probe_y} F{F}
    G0 X{printer['gcode_macro CONFIG'].probe_x} Y{printer['gcode_macro CONFIG'].probe_y} F{F}
    G0 X{printer['gcode_macro CONFIG'].probe_x} Y{printer['gcode_macro CONFIG'].probe_y - 20} F{F}
    G0 X{printer['gcode_macro CONFIG'].probe_x + 20} Y{printer['gcode_macro CONFIG'].probe_y - 20} F{F}
    RESTORE_GCODE_STATE NAME=detach_probe_state

###################################
# Filament Loading
###################################


[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    M117 Loading filament
    M83 ; set extruder to relative
    G1 E20 F1800 ; quickly load filament to down bowden
    G1 E20 F300 ; slower extrusion for hotend path
    G1 E20 F150 ; prime nozzle with filament
    M82 ; set extruder to absolute
    M117
    
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    M117 Unloading filament
    M83 ; set extruder to relative
    G1 E10 F300 ; extrude a little to soften tip
    G1 E-100 F1800 ; retract filament completely
    M82 ; set extruder to absolute
    M117

############################################################
# Homing and Calibration
############################################################

[gcode_macro HOME]
description: Home all axes to prepare for printing
gcode:
    {% set speed = params.SPEED|default(3000)|float %}

    M117 Homing
    G28             # Home all axes
    G1 Z20 F{speed} # Move nozzle away from bed
    M117

[gcode_macro HOME_IF_NOT_HOMED]
description: Home all axes only if not already homed
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
      HOME
    {% endif %}

[gcode_macro CENTER_TOOLHEAD]
gcode:
    HOME_IF_NOT_HOMED

    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set x_park = max_x / 2 %}
    {% set y_park = max_y / 2 %}
    {% set speed = params.SPEED|default(6000)|float %}

    M117 Centering toolhead
    G0 X{x_park} Y{y_park} Z20 F{speed}

[gcode_macro PARK_USEFULLY]
gcode:
    M117 Parking toolhead usefully
    HOME_IF_NOT_HOMED

    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set x_park = max_x / 2 %}
    {% set z_park = [max_z, printer.toolhead.position.z + 20] | min %}
    {% set speed = params.SPEED|default(6000)|float %}

    G0 X{x_park} Y{max_y} Z{z_park} F{speed}
    M117


############################################################
# Nevermore Filter Fan
############################################################

[gcode_macro SET_FILTER]
description: Set the Nevermore filter fan speed
gcode:
    {% set fan = params.FAN|default("filter") %}
    {% set speed = params.SPEED|default(0)|float %}

    SET_FAN_SPEED FAN={fan} SPEED={speed}

[gcode_macro FILTER_ON]
description: Helper: Turn on the Nevermore filter fan
gcode:
    SET_FILTER FAN={params.FAN|default('filter')} SPEED={params.SPEED|default(1)|float}

[gcode_macro FILTER_OFF]
description: Helper: Turn off the Nevermore filter fan
gcode:
    SET_FILTER FAN={params.FAN|default('filter')} SPEED=0

[gcode_macro FILTER_INFO]
description: Print Nevermore speed
gcode:
    {action_respond_info("Filter fan %s" % "on" if printer['fan_generic filter'].speed|float > 0.0 else "off")}

[delayed_gcode DELAYED_FILTER_OFF]
gcode:
  FILTER_OFF


############################################################
# Display
############################################################

[delayed_gcode CLEAR_DISPLAY]
gcode:
    M117


############################################################
# Neopixel / LED Macros
############################################################

[gcode_macro LED_ON]
description: Turn on the overhead LED lights
gcode:
    {% set red = params.RED|default(1)|float %}
    {% set green = params.GREEN|default(1)|float %}
    {% set blue = params.BLUE|default(1)|float %}

    SET_LED LED=overhead RED={red} GREEN={green} BLUE={blue}

[gcode_macro LED_READY]
gcode:
    SET_LED LED=overhead {printer['gcode_macro CONFIG'].color_white}

[gcode_macro LED_IDLE]
gcode:
    SET_LED LED=overhead {printer['gcode_macro CONFIG'].color_purple}

[gcode_macro LED_PRINTING]
gcode:
    {% set led = params.LED|default('overhead') %}
    {% set led_count = printer.configfile.config['neopixel ' ~ led].chain_count|int %}
    {% set led_progress_first = printer['gcode_macro CONFIG'].led_progress_first|int %}
    {% set led_progress_count = printer['gcode_macro CONFIG'].led_progress_count|int %}

    # Clear any LED templates
    LED_CLEAR_TEMPLATE

    # Set all LEDs to white
    LED_READY

    # Set the rear LEDs to the printing progress bar template
    {% for i in range(led_progress_first, led_progress_first + led_progress_count) %}
        SET_LED_TEMPLATE LED={led} INDEX={i} TEMPLATE=LED_PRINT_PROGRESS param_led_num={i - led_progress_first + 1} param_led_total={led_progress_count}
    {% endfor %}

[gcode_macro LED_CLEAR_TEMPLATE]
description: Clear all existing LED display templates
gcode:
    SET_LED_TEMPLATE LED={params.LED|default('overhead')} TEMPLATE=

[gcode_macro LED_SUCCESS]
gcode:
    SET_LED LED=overhead {printer['gcode_macro CONFIG'].color_green}

[gcode_macro LED_FAILURE]
gcode:
    SET_LED LED=overhead {printer['gcode_macro CONFIG'].color_red}

[gcode_macro LED_OFF]
description: Turn off the overhead LED lights
gcode:
    SET_LED LED=overhead RED=0 GREEN=0 BLUE=0

[delayed_gcode LED_STARTUP]
initial_duration: 0.5
gcode:
    M117 Voron V0.983 is starting up...

    {% set led = 'overhead' %}
    {% set led_count = printer.configfile.config['neopixel ' ~ led].chain_count|int %}

    {% for i in range(led_count) %}
        SET_LED LED={led} INDEX={i+1} {printer['gcode_macro CONFIG'].color_purple_dim}
        G4 P100     # Sleep for 100ms
    {% endfor %}

    UPDATE_DELAYED_GCODE ID=CLEAR_DISPLAY DURATION=10

[gcode_macro PARTY_TIME]
gcode:
    {% set led = params.LED|default('overhead') %}
    {% set led_count = printer.configfile.config['neopixel ' ~ led].chain_count|int %}
    {% set color_count = params.COLOR_COUNT|default(5)|int %}
    {% set colors = ['RED=1 GREEN=0 BLUE=0', 'RED=0 GREEN=1 BLUE=0', 'RED=0 GREEN=0 BLUE=1', 'RED=1 GREEN=0 BLUE=1', 'RED=1 GREEN=0.1 BLUE=0'] %}
    {% set rounds = params.ROUNDS|default(50)|int %}

    LED_OFF

    {% for a in range(rounds) %}
        {% for b in range(led_count) %}
            SET_LED LED={led} INDEX={b+1} {colors[(a+b) % color_count]} TRANSMIT={1 if b == led_count - 1 else 0}
        {% endfor %}
        G4 P250     # Sleep for 250ms
    {% endfor %}

    LED_OFF


############################################################
# Neopixel / LED Templates
############################################################

# LED templates return text in the following format: Red, Green, Blue, White
# White values removed below since only RGB LEDs are used

[display_template LED_PRINT_PROGRESS]
param_led_num: 0
param_led_total: 1
text:
    {% set ratio = printer.virtual_sdcard.progress %}
    {% set led_ratio = param_led_num|float / param_led_total %}
    {% if ratio >= led_ratio %}
        0.0, 1.0, 0.0   # Green
    {% else %}
        1.0, 1.0, 1.0   # White (using RGB LEDs)
    {% endif %}

[display_template LED_WARMUP_PROGRESS]
param_led_num: 0
param_led_total: 1
param_target_temp: 35
text:
    {% set temp = printer['temperature_sensor chamber'].temperature|float %}
    {% set ratio = (temp / param_target_temp)|float %}
    {% if ratio >= 0.98 %}
        1.0, 0.1, 0.0
    {% elif ratio >= 0.95 %}
        1.0, 0.2, 0.0
    {% elif ratio >= 0.9 %}
        1.0, 0.3, 0.0
    {% elif ratio >= 0.85 %}
        1.0, 0.4, 0.0
    {% else %}
        1.0, 0.5, 0.0
    {% endif %}
